name: "Azure Terragrunt PR Plan"
on:
  workflow_call:
    inputs:
      CONTAINER:
        required: false
        type: string
        default: ghcr.io/liatrio/builder-image-azure-terraform:v2.1.0
      WORKING_DIR:
        required: false
        type: string
        default: ./
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
jobs:
  azure-terragrunt-pr-plan:
    name: "Azure Terragrunt PR Plan"
    runs-on: ubuntu-latest
    container: ${{ inputs.CONTAINER }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terragrunt hcl check
        run: terragrunt hclfmt --terragrunt-check

      - name: Terraform fmt check
        run: terraform fmt -check -recursive

      - name: Terragrunt validate check
        run: terragrunt validate-all
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terragrunt Plan
        id: terragrunt_plan
        run: |
          terragrunt plan --terragrunt-non-interactive -out plan.out
          terragrunt show --terragrunt-non-interactive -no-color plan.out > plan.txt
        continue-on-error: true # Continue on error to ensure the plan is added as a comment on the PR.
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Comment on pull request
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const output = `
            #### Terragrunt Plan \`${{ steps.terragrunt_plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${fs.readFileSync('${{inputs.WORKING_DIR}}/plan.txt')}\`\`\`
            </details>`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Status
        if: contains(steps.*.outcome, 'failure')
        run: exit 1
